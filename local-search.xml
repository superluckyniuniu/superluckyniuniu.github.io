<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>哈希表</title>
    <link href="/2024/03/25/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/2024/03/25/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p>哈希表（又称散列表）， 是一种线性表的存储结构。哈希表由一个直接寻址表和一个哈希函数组成。哈希函数h(k)将元素关键字K作为自变量，返回元素的存储下标。</p></blockquote><h5 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h5><p>例：假设由一个长度为7 的哈希表，哈希函数h(k)&#x3D;k%7。元素集合{14，22，3，5}的存储方式如下表</p><table><thead><tr><th align="center">value</th><th align="center">14</th><th align="center">22</th><th align="center"></th><th align="center">3</th><th align="center"></th><th align="center">5</th><th align="center"></th></tr></thead><tbody><tr><td align="center">i(k%7)</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td></tr></tbody></table><h5 id="直接寻址表"><a href="#直接寻址表" class="headerlink" title="直接寻址表"></a>直接寻址表</h5><p><img src="/.././picture/2feda0dae07f167fa5fa3f320dddf59.png" alt="2feda0dae07f167fa5fa3f320dddf59"></p><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><blockquote><p>当域U很大时，需要消耗大量内存,不实用</p><p>如果域U很大，但实际出现的key很少，则大量空间被浪费</p><p>无法处理关键字不是数字的情况</p></blockquote><h6 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h6><blockquote><p>构建大小为m的寻址表T</p><p>key为k的元素放在h(k)位置上</p><p>h(k)时一个函数，其将域U映射道表T[0,1,2,……,m-1]</p></blockquote><h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><p>当哈希函数返回的位置已经有值时，就会出现哈希冲突</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><blockquote><p>开放寻址法 ： 如果哈希函数返回的位置已经有值，则可以向后探查新的位置来存储这个值</p><p>线性探查   ： 如果位置 i 被占用 ， 则探查 i+1, i+2 ,……..</p><p>二次探查  ： 如果位置 i 被占用 ，则探查i+1^2^ , i-1^2^, i +2^2^  ,i-2^2^</p><p>二度哈希 ： 有n个哈希函数，当使用第1个哈希函数h1法生冲突时，则尝试使用h2,h3</p><p>链表法 ： 哈希表每个位置都链接一个链表，当冲突发生时，冲突的元素将被加到该位置链表的最后。</p></blockquote><table><thead><tr><th align="center">0</th><th align="center">496</th><th align="center">896</th><th align="center"></th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">337</td><td align="center">356</td></tr><tr><td align="center">2</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">3</td><td align="center">367</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">4</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">5</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">6</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">7</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">8</td><td align="center">184</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">9</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">10</td><td align="center">26</td><td align="center">126</td><td align="center"></td></tr></tbody></table><h4 id="常用哈希函数"><a href="#常用哈希函数" class="headerlink" title="常用哈希函数"></a>常用哈希函数</h4><blockquote><p>除法哈希表：</p><blockquote><p>h(k) &#x3D; k %m</p></blockquote><p>乘法哈希表：</p><blockquote><p>h(k) &#x3D; floor(m * (A * key%1))</p></blockquote><p>全域哈希表：</p><blockquote><p>Ha,b(k) &#x3D; ((a*key + b ) mod p) mod m      a,b &#x3D;1,2,…..,p-1</p></blockquote></blockquote><h4 id="哈希表代码实现"><a href="#哈希表代码实现" class="headerlink" title="哈希表代码实现"></a>哈希表代码实现</h4><p>哈希表  通过哈希函数来计算数据存储位置的数据结构，通常支持如下操作：</p><blockquote><p>insert(key,value):  插入键值(key,value)</p><p>get(key): 如果存在键为key的键值对则返回其value,否则返回空值</p><p>delete(key): 删除键为key的键值对</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs pyhon">class Linklist:<br>    class Node:<br>        def __init__(self,item=None):<br>            self.item = item<br>            self.next = None<br>    class LinklistIterator: #迭代器类  for循环依赖于迭代器,不写迭代器的话,链表不能for循环<br>        def __init__(self,node):<br>            self.node = node<br>        def __next__(self):<br>            if self.node:<br>                cur_node = self.node<br>                self.node = cur_node.next<br>                return cur_node.item<br>            else:<br>                raise StopIteration<br>        &#x27;&#x27;&#x27;<br>        代器规定必要有这个函数 目的是为了 iterator本身必须是iterable<br>        因此定义__iter__ 函数当对iterator求自身iterator时调用自己<br>    <br>       &#x27;&#x27;&#x27;<br>        def __iter__(self):  #迭<br>            return self<br>    def __init__(self,iterable = None):<br>        self.head = None<br>        self.tail = None<br>        if iterable:<br>            self.extend(iterable)<br>    def append(self,obj):<br>        s = Linklist.Node(obj)<br>        if not self.head:<br>            self.head = s<br>            self.tail = s<br>        else:<br>            self.tail.next = s<br>            self.tail = s<br>    def extend(self,iterable):<br>        for obj in iterable:<br>            self.append(obj)<br>    def find(self,obj):<br>        for n in self:<br>            if n == obj:<br>                return True<br>        else:<br>            return False<br>    def __iter__(self): <br>        return self.LinklistIterator(self.head)<br>    def __repr__(self): #转化为字符串<br>        return &quot;&lt;&lt;&quot;+&quot;,&quot;.join(map(str,self))+&#x27;&gt;&gt;&#x27;<br>    &#x27;&#x27;&#x27;map是python内置函数，会根据提供的函数对指定的序列做映射。<br>    map()函数的格式是：map(function,iterable,...) <br>    参数:<br>    function是一个函数名称，通过该函数对后续参数iterable进行处理<br>    iterable是一个可迭代对象，比如：字符串、列表、字典、元组、集合等<br>    &#x27;&#x27;&#x27;<br><br>#类似于集合的结构<br>class HashTable:<br>    def __init__(self,size=101):#size定义哈希表长度<br>        self.size = size<br>        self.T = [Linklist() for i in range(self.size)]<br>    <br>    def h(self,k):<br>        return k % self.size<br>        <br>    def insert(self,k):<br>        i = self.h(k) #k的位置 <br>        if self.find(k):<br>            print(&#x27;重复插入&#x27;)<br>        else:<br>            self.T[i].append(k)<br>    <br>    def find(self,k):<br>        i = self.h(k)<br>        return self.T[i].find(k)<br>ht = HashTable()<br>ht.insert(0)<br>ht.insert(1)<br>ht.insert(101)<br>a= ht.T[0].head.next.item<br>print(a)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kmb算法</title>
    <link href="/2024/03/25/kmb%E7%AE%97%E6%B3%95/"/>
    <url>/2024/03/25/kmb%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="kmp算法"><a href="#kmp算法" class="headerlink" title="kmp算法"></a>kmp算法</h3><p>kmp算法被用来做字符串的匹配。即 快速在 原字符串 中找到 匹配字符串</p><p>kmp算法的复杂度为O(m+n)</p><p><img src="/.././picture/screenshot-1711343916334.png" alt="screenshot-1711343916334"></p><h4 id="Next-数组"><a href="#Next-数组" class="headerlink" title="Next 数组"></a>Next 数组</h4><p>Next 数组在Kmp算法中有着举足轻重的地位。起作用在于kmp算法中前后缀的匹配</p><p><img src="/../../picture/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240325133445.png" alt="微信截图_20240325133445"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_next</span>(<span class="hljs-params">patt</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    计算 Next数组</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">next</span> = [<span class="hljs-number">0</span>] <span class="hljs-comment"># next 数组(初值元素为0)</span><br>    prefix_len = <span class="hljs-number">0</span> <span class="hljs-comment"># 当前共同前后缀的长度</span><br>    i = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(patt):<br>        <span class="hljs-keyword">if</span> patt[prefix_len] == patt[i]:  <span class="hljs-comment">#如果下个字符相同 即可构成更长度的前后缀</span><br>            prefix_len += <span class="hljs-number">1</span><br>            <span class="hljs-built_in">next</span>.append(prefix_len)<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> prefix_len == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">next</span>.append(<span class="hljs-number">0</span>) <span class="hljs-comment">#当查表后，依然不存在相应的 数值，则将对应next设为0</span><br>                i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                prefix_len = <span class="hljs-built_in">next</span>[prefix_len - <span class="hljs-number">1</span>] <br>                <span class="hljs-comment"># 当下一个字符不同时，查遍看看是否有更短的前后缀</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Adaptive-Normalization-for-Non-stationary-Time-Series-Forecasting:-A Temporal-Slice-Perspective-文献阅读</title>
    <link href="/2024/03/25/Adaptive-Normalization-for-Non-stationary-Time-Series-Forecasting-A-Temporal-Slice-Perspective-%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    <url>/2024/03/25/Adaptive-Normalization-for-Non-stationary-Time-Series-Forecasting-A-Temporal-Slice-Perspective-%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="创新点"><a href="#创新点" class="headerlink" title="创新点"></a>创新点</h1><p>【为克服】 使用不适当的统计量进行归一化  【导致的】 输入序列的每个切片的本能模式被破坏，以及未来统计量的不良估计而导致最终预测结果的预测偏移。</p><p>【提出了】 一个用于非平稳时间序列预测的通用归一化框架- -切片自适应归一化 （Slicing Adaptive Normalization  SAN）</p><hr><p>【导致】 不适当统计量的 【原因】：</p><p>【一方面】  现有的大多数方法忽略了输入序列和 horizon series 之间的分布差异，简单地利用输入序列的统计特性来非正则处理输出结果。</p><p>【此外】先前的研究假设在归一化过程中，同一实例内的所有时间点具有相同的统计特性，全局实例归一化被广泛应用。 </p><p>例：<img src="/../../picture/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240325145939.png" alt="微信截图_20240325145939"></p><center style="color:#C0C0C0;text-decoration:underline">能源消费量及其日均值( MeanByDay )的预测实例说明,还将输入序列的均值和horizon series的均值绘制在图中。.jpg</center><p>尽管在时间上相关，但输入序列的均值与 horizon series 的显著( 075 ~ 1 . 5)不同，表明存在潜在的普遍分布差异。</p><hr><h1 id="方法简述"><a href="#方法简述" class="headerlink" title="方法简述"></a>方法简述</h1><p>【首先】  将输入序列分割成互不重叠的等大小切片</p><p>【然后】  根据其统计特性对切片进行归一化处理，并将其输入到预测模型中。</p><p>【同时】  使用一个统计量预测模块，根据输入的统计量来预测未来切片的分布。</p><p>【最后】  利用估计良好的统计量将非平稳信息还原为预测模型的输出。</p><h2 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h2><p>统计量预测模块独立地模拟统计量的演化趋势，SAN采用了更精确的统计量进行自适应的非正规化。</p><p>【因此】 非平稳预测任务实际上被简化为统计预测和平稳预测。</p><p>【此外】  SAN是一个模型无关的框架，可以应用于任意的预测模型。在一个广泛使用的基准数据集上进行了充分的实验。</p><p>【实验结果表明】SAN优于先进的归一化方法，大幅度地提高了各种主流预测模型的性能。</p><hr><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><blockquote><p>对输入序列的每个切片进行归一化去除非平稳因子，通过非归一化以去除非平稳因子，再通过归一化将其恢复到输出序列</p><blockquote><p>基于间跨度T 将输入序列 x^i^ 分成 M 个 非重叠切片 {x^i^ <del>j</del>}^M^ <del>j&#x3D;1</del></p><p>每个切片的均值和标准差计算如下：</p><p><img src="/.././picture/image-20240326155343938.png" alt="image-20240326155343938"></p><p>其中μ^i^ <del>j</del> ,σ^i^ <del>j</del> ∈ R^V*l^   , x^i^ <del>j,t</del> 是 切片x^i^ <del>j</del>  在t时间步长的值。</p><p>通过原始输出谢列的每个切片的单独统计信息进行归一化，公式如下：</p><p><img src="/.././picture/image-20240326160000454.png" alt="image-20240326160000454"></p><p>ε 是一个小常数</p><p>将每个切片归一化后，再按其原始时间顺序回复所有切片，并让没有非平稳因子的处理序列成为模型的新输入</p></blockquote></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>文献阅读</tag>
      
      <tag>非平稳时间序列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>比较操作符</title>
    <link href="/2024/03/21/%E6%AF%94%E8%BE%83%E6%93%8D%E4%BD%9C%E7%AC%A6-title/"/>
    <url>/2024/03/21/%E6%AF%94%E8%BE%83%E6%93%8D%E4%BD%9C%E7%AC%A6-title/</url>
    
    <content type="html"><![CDATA[<p>Python包含了一系列的魔法方法，用于实现对象之间直接比较，而不需要采用方法调用。同样也可以重载Python默认的比较方法，改变它们的行为。下面是这些方法的列表：</p><ul><li><code>__cmp__</code>(self, other)<br><code>__cmp__</code> 是所有比较魔法方法中最基础的一个，它实际上定义了所有比较操作符的行为（&lt;,&#x3D;&#x3D;,!&#x3D;,等等），但是它可能不能按照你需要的方式工作（例如，判断一个实例和另一个实例是否相等采用一套标准，而与判断一个实例是否大于另一实例采用另一套）。<code>__cmp__</code> 应该在 self &lt; other 时返回一个负整数，在 self &#x3D;&#x3D; other 时返回0，在 self &gt; other 时返回正整数。最好只定义你所需要的比较形式，而不是一次定义全部。如果你需要实现所有的比较形式，而且它们的判断标准类似，那么 <code>__cmp__</code> 是一个很好的方法，可以减少代码重复，让代码更简洁。</li><li><code>__eq__</code>(self, other)<br>定义等于操作符(&#x3D;&#x3D;)的行为。</li><li><code>__ne__</code>(self, other)<br>定义不等于操作符(!&#x3D;)的行为。</li><li><code>__lt__</code>(self, other)<br>定义小于操作符(&lt;)的行为。</li><li><code>__gt__</code>(self, other)<br>定义大于操作符(&gt;)的行为。</li><li><code>__le__</code>(self, other)<br>定义小于等于操作符(&lt;)的行为。</li><li><code>__ge__</code>(self, other)<br>定义大于等于操作符(&gt;)的行为。</li></ul><p>选自：<a href="https://zhuanlan.zhihu.com/p/134649090">非常全的通俗易懂 Python 魔法方法指南（上） - 知乎 (zhihu.com)</a></p><p>例：<a href="https://leetcode.cn/problems/merge-k-sorted-lists/solutions/2384305/liang-chong-fang-fa-zui-xiao-dui-fen-zhi-zbzx/">23. 合并 K 个升序链表 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ListNode.__lt__ = <span class="hljs-keyword">lambda</span> a, b: a.val &lt; b.val  <span class="hljs-comment"># 让堆可以比较节点大小</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最小堆</title>
    <link href="/2024/03/19/%E6%9C%80%E5%B0%8F%E5%A0%86-title/"/>
    <url>/2024/03/19/%E6%9C%80%E5%B0%8F%E5%A0%86-title/</url>
    
    <content type="html"><![CDATA[<h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><p>力扣第23题：合并k个升序链表</p><p>给你一个链表数组，每个链表都已经按升序排列。</p><p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><p><strong>示例 1：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">输入：lists = [[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">6</span>]]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>解释：链表数组如下：<br>[<br>  <span class="hljs-number">1</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>,<br>  <span class="hljs-number">1</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>,<br>  <span class="hljs-number">2</span>-&gt;<span class="hljs-number">6</span><br>]<br>将它们合并到一个有序链表中得到。<br><span class="hljs-number">1</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">输入：lists = []<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">输入：lists = [[]]<br>输出：[]<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/merge-k-sorted-lists/description/">23. 合并 K 个升序链表 - 力扣（LeetCode）</a></p><h2 id="最小堆"><a href="#最小堆" class="headerlink" title="最小堆"></a>最小堆</h2><p>定义：<br>1、堆是一颗完全二叉树；</p><p>2、堆中的某个结点的值总是大于等于（最大堆）或小于等于（最小堆）其孩子结点的值。</p><p>3、堆中每个结点的子树都是堆树。</p><p><img src="/../picture/70" alt="img"><img src="/../picture/80" alt="img"></p><h2 id="python-heapq库"><a href="#python-heapq库" class="headerlink" title="python heapq库"></a>python heapq库</h2><p>最小堆的编写用到heapq库,堆的使用一般用于排序</p><p><a href="https://docs.python.org/zh-cn/3/library/heapq.html">heapq — 堆队列算法 — Python 3.12.2 文档</a></p><h3 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h3><p>res.append(path)相当于append进去path的引用，如果你此时改path，那么res里面的结果也会变，这两是指向同一个对象的。path[:]相当于重新赋值了一个对象</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/18/hello-world/"/>
    <url>/2024/03/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
